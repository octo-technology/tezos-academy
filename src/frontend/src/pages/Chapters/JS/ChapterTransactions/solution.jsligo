type command = {
    item : nat,
    price : tez
}

type mainAction = ["Pay", command] | ["Buy"]

type storage = unit

type return_ = [list<operation>, storage]

let purchase = ([_item, purchase_price, store] : [nat, tez, storage]) : return_ => {
    const ship_address : address = ("tz1TGu6TN5GSez2ndXXeDX6LgUDvLzPLqgYV" as address);
    const vendor_address : address = ("tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" as address);

    let _check_source : unit = assert_with_error( (Tezos.source != ship_address), "Access denied");
    let _check_amount : unit = assert_with_error( (Tezos.amount != purchase_price), "Incorrect amount");
    
    let vendor_contract : contract<unit> =
      match ((Tezos.get_contract_opt (vendor_address) as option<contract<unit>>), {
        Some: (c: contract<unit>) => c,
        None: () => (failwith("Contract not found.") as contract<unit>)
    });
        
    // Type your solution below
    let op : operation = Tezos.transaction(unit, purchase_price, vendor_contract);
    return [list([op]), store];
}

let main = ([action, store] : [mainAction, storage]) : return_ =>
    match (action, {
        Pay: (cmd: command) => purchase (cmd.item, cmd.price, store),
        Buy: () => (failwith("not implemented") as return_)
    })